#include <iostream>

int main()
{
	const int rows = 4, cols = 5;
    // Можно матрицу хранить в одномерном массиве,
    // сохранив сначала 1-ю строку, за ней сразу 2-ю строку и т.д.
	int A[rows * cols];  // a11 a12 a13 ... a1m a21 a22 ... a2m ... an1 an2 ... ann 
	// A_ij = i+j+1
	for (int i = 0; i < rows; ++i) {
		for (int j = 0; j < cols; ++j) {
			A[i*cols + j] = i + j + 1;  // Номер элемента i,j в массиве A тогда будет вычисляться как  (i*cols + j)
		}
	}

	std::cout << "A = ";
	for (int i = 0; i < rows * cols; ++i) {
		std::cout << A[i] << ' ';
	}
	std::cout << std::endl;
	std::cout << "Matrix = " <<std::endl;
	for (int i = 0; i < rows; ++i) {
		for (int j = 0; j < cols; ++j) {
			std::cout<< A[i * cols + j] << ' ';
		}
		std::cout << std::endl;
	}

	int M[rows][cols]; // Статический двумерный массив. В памяти элементы хранятся как у предыдущего, то есть по строкам записанным рядом.
                       // Но доступ к элементов будет через два отдельных индекса: номера строки и номера столбца
	for (int i = 0; i < rows; ++i) {
		for (int j = 0; j < cols; ++j) {
			M[i][j] = (i + 1)*(j + 1);
		}
	}

	std::cout << "M = " << std::endl;
	for (int i = 0; i < rows; ++i) {
		for (int j = 0; j < cols; ++j) {
			std::cout << M[i][j] << ' ';
		}
		std::cout << std::endl;
	}
	/* // Примеры инициализации массивов
	int M1[3][4] = { {1,2,3,4}, {4,5,6,7}, {7,8,9,10}};
	int M2[3][4] = { {1,2}, {4,5,6}, {7}};  // { {1,2,0,0}, {4,5,6,0}, {7,0,0,0}};
	int M3[3][4] = { 1,2,3,4,5,6};  // { {1,2,3,4}, {5,6,0,0}, {0,0,0,0}};
	int M4[ ][4] = { {1,2,3,4}, {4,5,6,7}, {7,8,9,10}};
	int M5[ ][4] = { {1,2}, {4,5,6}, {7}};  // { {1,2,0,0}, {4,5,6,0}, {7,0,0,0}};
	int M6[ ][4] = { 1,2,3,4,5,6};  // int M6[2][4] = { {1,2,3,4}, {5,6,0,0}};
	*/

	int IMG[3][rows][cols]; // Пример трехмерного массива. Можно представить как три матрицы размером rows на cols.
	for (int k = 0; k < 3; ++k) {
		for (int i = 0; i < rows; ++i) {
			for (int j = 0; j < cols; ++j) {
				IMG[k][i][j] = (k+1)*100 + (i + 1) * (j + 1);
			}
		}
	}
	std::cout << "IMG = " << std::endl;
	for (int k = 0; k < 3; ++k) {
		std::cout << "page " << k << std::endl;
		for (int i = 0; i < rows; ++i) {
			for (int j = 0; j < cols; ++j) {
				std::cout<<IMG[k][i][j]<<' ';
			}
			std::cout << std::endl;
		}
	}
	
	/* // Примеры инициализации
	int B1[2][3][4] = { {{1,2,3,4},{1,2,3,4},{1,2,3,4}}, {{5,6,7,8},{5,6,7,8},{5,6,7,8}} };
	int B2[ ][3][4] = { {{1,2,3,4},{1,2,3,4},{1,2,3,4}}, {{5,6,7,8},{5,6,7,8},{5,6,7,8}} };
	int B3[ ][3][4] = { 1,2,3,4,1,2,3,4,1,2,3,4,5,6,7,8,5,6,7,8,5,6,7,8,9};
	*/

	return 0;
}
